🐍 Python is a high-level, versatile programming language that's designed to be easy to read, write, and understand
-> Python is Dynamic :-No Type Declaration Needed You don’t need to say what type a variable is
EG:
x = 5         # Python treats 'x' as an integer
x = "hello"   # Now 'x' is a string
🧱 In Python, it requires indentation .
🐍Python Interpreter & Shell (REPL)
->Python is an interpreted language, which means it executes code line by line using an interpreter.
💻 Shell
Refers to the interface or tool where the REPL happens.
When you type python or python3 in the terminal and see >>>, you're inside the Python Shell.
🧪 REPL (Read–Eval–Print Loop)
REPL stands for:
📥 Read your input (the Python code you type)
🤖 Evaluate the code
📤 Print the result
🔁 Loop back and wait for the next command

🛠️ Useful Methods & Functions in Python REPL
🧮 Built-in Functions
These work anywhere — including REPL!
>print() – display output
>type() – check the type of a variable
>len() – get the length of strings, lists, etc.
>Input() – capture user input
>abs() – absolute value
>round() – round a number
>max(), min() – find highest/lowest values
>sum() – total values in a list or tuple
>sorted() – return a sorted version of a sequence
>help() – get help on any object or module
>dir() – list attributes/methods of object

🧠 PEP 8
->📘 PEP 8 (Python Enhancement Proposal 8) is the official style guide for writing clean and consistent Python code.
🧼 1. Code Layout
Use 4 spaces per indentation level (avoid tabs unless configured properly).
Keep each line within 79 characters for better readability.
Separate top-level functions and classes using 2 blank lines to organize code visually.
🧬 2. Naming Conventions
1)snake_case (variables, functions, methods, modules):
This involves using lowercase letters for all words and separating them with underscores. For example: my_variable, calculate_area, process_data.
2)PascalCase (classes):
Each word in the class name starts with a capital letter, with no underscores. For example: MyClass, HTTPResponse, BankAccount.
3)ALL_CAPS (constants):
All letters are capitalized, and words are separated by underscores. For example: MAX_CONNECTIONS, PI, DEBUG_MODE.

🧠 Static vs Dynamic Typing — Key Concepts
🔒 Statically Typed Languages
Definition: Type of each variable is determined at compile time.

Type Declaration: Often required by the programmer (e.g., int x = 10; in C). Some modern statically typed languages support type inference (e.g., Kotlin, Scala, Haskell).

Error Checking: The compiler performs strict type checking before execution — reducing runtime errors.

Common Use Cases: Large, complex systems where safety and performance matter (e.g., enterprise software, systems programming).

Examples: C, C++, Java, Rust, Go, Scala, Kotlin, Haskell

✅ Advantages
Catch type errors early in the development cycle

Better tooling, optimization, and IDE support

Easier to enforce contracts and interfaces across teams

🔓 Dynamically Typed Languages
Definition: Variable types are determined at runtime, based on the actual data held.

Type Declaration: Not required — the interpreter assigns types on the fly.

Flexibility: Allows faster development and prototyping but may lead to hidden bugs if types change unexpectedly.

Common Use Cases: Scripting, automation, rapid app development, small to medium-sized projects.

Examples: Python, JavaScript, Ruby, PHP, Perl, Erlang

✅ Advantages
Quick and flexible coding — ideal for beginners or fast iterations

Cleaner syntax and fewer boilerplate declarations

Excellent for interactive use (e.g., REPL environments)

🔁 Summary of Differences
Feature	Static Typing	Dynamic Typing
Type Checking	Compile-time	Runtime
Type Declaration	Required or inferred	Optional and runtime-determined
Error Detection	Before execution	During execution
Development Speed	Slower, more structured	Faster, more flexible
Common Languages	C, C++, Java, Rust, Scala	Python, JavaScript, PHP, Ruby

🧮 1. Arithmetic Operators
Used for basic mathematical calculations:

+  # Addition
-  # Subtraction
*  # Multiplication
/  # Division
%  # Modulus (remainder)
/ /  # Floor Division
**  # Exponentiation

🔁 2. Assignment Operators
Used to assign values:

=    # x = 5
+=   # x += 3  (x = x + 3)
-=   # x -= 2
*=   # x *= 4
/=   # x /= 2
%=   # x %= 3
**=  # x **= 2
//=  # x //= 5

🔍 3. Comparison Operators
Used for logical comparisons:

==   # Equal to
!=   # Not equal to
>    # Greater than
<    # Less than
>=   # Greater than or equal to
<=   # Less than or equal to

💡 4. Logical Operators
Used to combine conditional statements:

->and   # Both conditions are true
->or    # At least one condition is true
->not   # Reverses the result (True to False)

🔢 5. Bitwise Operators
Operate on binary representations:

&    # AND
|    # OR
^    # XOR
~    # NOT
<<   # Shift left
>>   # Shift right

🧭 6. Membership Operators
Used to check presence in a sequence:

->in      # Checks if value exists in a sequence
->not in  # Checks if value does NOT exist

🧷 7. Identity Operators
Used to compare memory locations:

->is      # Returns True if both refer to same object
->is not  # Returns True if they don’t

🧠 String
->A string is a sequence of characters enclosed in quotes.
->Python supports single ', double ", and triple quotes ''' or """.
✨ 2. String Properties
->mmutable: You cannot change characters in place.
->Indexed & Sliced: Supports indexing (s[0]) and slicing (s[1:5]).
->Iterable: You can loop through a string.

🧪 3. Useful String Methods
Method	Description	Example

capitalize()	Capitalizes first character
casefold()	Aggressive lowercase for comparison
center(width)	Centers string with padding
count(sub)	Counts how many times substring occurs
encode()	Encodes string to bytes
endswith(suffix)	Checks if string ends with suffix
expandtabs(tabsize)	Replaces \t with spaces
find(sub)	First index of substring (or -1)
format()	Formats string with placeholders
format_map(mapping)	Uses dictionary to format string
index(sub)	First index of substring (raises error if not found)
isalnum()	Returns True if all characters are alphanumeric
isalpha()	Returns True if all characters are alphabetic
isascii()	Returns True if all characters are ASCII
isdecimal()	Returns True if all characters are decimal digits
isdigit()	Returns True if all characters are digits
isidentifier()	Returns True if string is valid Python identifier
islower()	Returns True if all characters are lowercase
isnumeric()	Returns True if all characters are numeric
isprintable()	Returns True if all characters are printable
isspace()	Returns True if all characters are whitespace
istitle()	Returns True if string is title-cased
isupper()	Returns True if all characters are uppercase
join(iterable)	Joins elements using the string as separator
ljust(width)	Left-justifies string in field of given width
lower()	Converts string to lowercase
lstrip()	Removes leading whitespace (or characters)
maketrans()	Builds translation table for use with translate()
partition(sep)	Splits string into 3 parts around separator
replace(old, new)	Replaces all instances of old with new
rfind(sub)	Last index of substring (or -1)
rindex(sub)	Last index (raises error if not found)
rjust(width)	Right-justifies string
rpartition(sep)	Like partition() but starts from end
rsplit(sep)	Splits from right side
rstrip()	Removes trailing whitespace (or characters)
split(sep)	Splits string by separator
splitlines()	Splits string into lines
startswith(prefix)	Checks if string starts with prefix
strip()	Removes leading and trailing whitespace (or characters)
swapcase()	Swaps case of each character
title()	Converts string to title case
translate(table)	Translates characters using mapping table
upper()	Converts string to uppercase
zfill(width)	Pads string with zeros on the left



🔍 5. String Operators
+ → concatenation
* → repetition
in / not in → membership
== / != → comparison

✂️ 6. Slicing & Indexing
python
s = "Python"
s[0]        # 'P'
s[-1]       # 'n'
s[1:4]      # 'yth'
s[::-1]     # 'nohtyP' (reverse string)

🧱 7. Escape Characters
\n – newline
\t – tab
\\ – backslash
\' or \" – quotes inside string

what is array?
 An array is a data structure used to store a collection of items—typically of the same type—in a single, organized unit. 
It’s like a row of labeled boxes where each box holds a value and you can access them by index. 📦

📦 What Is a Structured Array?
A structured array is a type of NumPy array where each element can have multiple fields, like a row in a database or a record in a table. 
Each field has a name and its own data type.
EG-[ ('Alice', 25, 5.5), ('Bob', 30, 6.1), ... ]
Where each row has:
A name (string),
An age (integer),
A height (float)
✅ Benefits of Structured Arrays
->You can store and work with tabular data efficiently.
->Each column (field) can have its own type.
->Helpful for data analysis, machine learning, and working with datasets.

LIST 
🧾 Definition:
->A list is an ordered collection of items, which can be changed (mutable), and it allows duplicate values.
🎯 Key Features of Lists
Feature	      Description
Ordered	      | Items stay in the same order you added them
Mutable	      | You can change items, add, or remove them
Heterogeneous	| Can store different types: strings, numbers, even other lists
Indexed	      | Access items using positions starting from 0
Allows Duplicates	| [1, 2, 2, 3] is valid

➕ Add & Insert
Method	                     Description	                      Example
append(x)	          Add x to the end of the list	          my_list.append(4)
extend(iterable)	  Add elements from another iterable	    my_list.extend([6, 7])
insert(i, x)	      Insert x at index i	                    my_list.insert(1, 10)

❌ Remove Items
Method            	Description	                          Example
remove(x)	    Removes first occurrence of x          	my_list.remove(2)
pop(i)	      Removes and returns item at index i   	my_list.pop(0) → returns 1
clear()	      Empties the entire list               	my_list.clear()

🔍 Search & Analyze
Method	           Description	                        Example
index(x)	    Returns index of first x	           my_list.index(3)
count(x)	    Counts how many times x appears    	 my_list.count(2)
in            keyword Checks if item exists	       2 in my_list → True

🔁 Sort & Reverse
Method	       Description	                     Example
sort()	     Sorts list in ascending order	   my_list.sort()
reverse()    Reverses the list’s order	       my_list.reverse()

# List comprehension
squares = [x**2 for x in range(5)]  # → [0, 1, 4, 9, 16]
