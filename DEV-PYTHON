🐍 Python is a high-level, versatile programming language that's designed to be easy to read, write, and understand
-> Python is Dynamic :-No Type Declaration Needed You don’t need to say what type a variable is
EG:
x = 5         # Python treats 'x' as an integer
x = "hello"   # Now 'x' is a string
🧱 In Python, it requires indentation .
🐍Python Interpreter & Shell (REPL)
->Python is an interpreted language, which means it executes code line by line using an interpreter.
💻 Shell
Refers to the interface or tool where the REPL happens.
When you type python or python3 in the terminal and see >>>, you're inside the Python Shell.
🧪 REPL (Read–Eval–Print Loop)
REPL stands for:
📥 Read your input (the Python code you type)
🤖 Evaluate the code
📤 Print the result
🔁 Loop back and wait for the next command

🛠️ Useful Methods & Functions in Python REPL
🧮 Built-in Functions
These work anywhere — including REPL!
>print() – display output
>type() – check the type of a variable
>len() – get the length of strings, lists, etc.
>Input() – capture user input
>abs() – absolute value
>round() – round a number
>max(), min() – find highest/lowest values
>sum() – total values in a list or tuple
>sorted() – return a sorted version of a sequence
>help() – get help on any object or module
>dir() – list attributes/methods of object

🧠 PEP 8
->📘 PEP 8 (Python Enhancement Proposal 8) is the official style guide for writing clean and consistent Python code.
🧼 1. Code Layout
Use 4 spaces per indentation level (avoid tabs unless configured properly).
Keep each line within 79 characters for better readability.
Separate top-level functions and classes using 2 blank lines to organize code visually.
🧬 2. Naming Conventions
1)snake_case (variables, functions, methods, modules):
This involves using lowercase letters for all words and separating them with underscores. For example: my_variable, calculate_area, process_data.
2)PascalCase (classes):
Each word in the class name starts with a capital letter, with no underscores. For example: MyClass, HTTPResponse, BankAccount.
3)ALL_CAPS (constants):
All letters are capitalized, and words are separated by underscores. For example: MAX_CONNECTIONS, PI, DEBUG_MODE.

🧠 Static vs Dynamic Typing — Key Concepts
🔒 Statically Typed Languages
Definition: Type of each variable is determined at compile time.

Type Declaration: Often required by the programmer (e.g., int x = 10; in C). Some modern statically typed languages support type inference (e.g., Kotlin, Scala, Haskell).

Error Checking: The compiler performs strict type checking before execution — reducing runtime errors.

Common Use Cases: Large, complex systems where safety and performance matter (e.g., enterprise software, systems programming).

Examples: C, C++, Java, Rust, Go, Scala, Kotlin, Haskell

✅ Advantages
Catch type errors early in the development cycle

Better tooling, optimization, and IDE support

Easier to enforce contracts and interfaces across teams

🔓 Dynamically Typed Languages
Definition: Variable types are determined at runtime, based on the actual data held.

Type Declaration: Not required — the interpreter assigns types on the fly.

Flexibility: Allows faster development and prototyping but may lead to hidden bugs if types change unexpectedly.

Common Use Cases: Scripting, automation, rapid app development, small to medium-sized projects.

Examples: Python, JavaScript, Ruby, PHP, Perl, Erlang

✅ Advantages
Quick and flexible coding — ideal for beginners or fast iterations

Cleaner syntax and fewer boilerplate declarations

Excellent for interactive use (e.g., REPL environments)

🔁 Summary of Differences
Feature	Static Typing	Dynamic Typing
Type Checking	Compile-time	Runtime
Type Declaration	Required or inferred	Optional and runtime-determined
Error Detection	Before execution	During execution
Development Speed	Slower, more structured	Faster, more flexible
Common Languages	C, C++, Java, Rust, Scala	Python, JavaScript, PHP, Ruby

🧮 1. Arithmetic Operators
Used for basic mathematical calculations:

+  # Addition
-  # Subtraction
*  # Multiplication
/  # Division
%  # Modulus (remainder)
/ /  # Floor Division
**  # Exponentiation

🔁 2. Assignment Operators
Used to assign values:

=    # x = 5
+=   # x += 3  (x = x + 3)
-=   # x -= 2
*=   # x *= 4
/=   # x /= 2
%=   # x %= 3
**=  # x **= 2
//=  # x //= 5

🔍 3. Comparison Operators
Used for logical comparisons:

==   # Equal to
!=   # Not equal to
>    # Greater than
<    # Less than
>=   # Greater than or equal to
<=   # Less than or equal to

💡 4. Logical Operators
Used to combine conditional statements:

->and   # Both conditions are true
->or    # At least one condition is true
->not   # Reverses the result (True to False)

🔢 5. Bitwise Operators
Operate on binary representations:

&    # AND
|    # OR
^    # XOR
~    # NOT
<<   # Shift left
>>   # Shift right

🧭 6. Membership Operators
Used to check presence in a sequence:

->in      # Checks if value exists in a sequence
->not in  # Checks if value does NOT exist

🧷 7. Identity Operators
Used to compare memory locations:

->is      # Returns True if both refer to same object
->is not  # Returns True if they don’t

🧠 String
->A string is a sequence of characters enclosed in quotes.
->Python supports single ', double ", and triple quotes ''' or """.
✨ 2. String Properties
->mmutable: You cannot change characters in place.
->Indexed & Sliced: Supports indexing (s[0]) and slicing (s[1:5]).
->Iterable: You can loop through a string.

🧪 3. Useful String Methods
Method	Description	Example

capitalize()	Capitalizes first character
casefold()	Aggressive lowercase for comparison
center(width)	Centers string with padding
count(sub)	Counts how many times substring occurs
encode()	Encodes string to bytes
endswith(suffix)	Checks if string ends with suffix
expandtabs(tabsize)	Replaces \t with spaces
find(sub)	First index of substring (or -1)
format()	Formats string with placeholders
format_map(mapping)	Uses dictionary to format string
index(sub)	First index of substring (raises error if not found)
isalnum()	Returns True if all characters are alphanumeric
isalpha()	Returns True if all characters are alphabetic
isascii()	Returns True if all characters are ASCII
isdecimal()	Returns True if all characters are decimal digits
isdigit()	Returns True if all characters are digits
isidentifier()	Returns True if string is valid Python identifier
islower()	Returns True if all characters are lowercase
isnumeric()	Returns True if all characters are numeric
isprintable()	Returns True if all characters are printable
isspace()	Returns True if all characters are whitespace
istitle()	Returns True if string is title-cased
isupper()	Returns True if all characters are uppercase
join(iterable)	Joins elements using the string as separator
ljust(width)	Left-justifies string in field of given width
lower()	Converts string to lowercase
lstrip()	Removes leading whitespace (or characters)
maketrans()	Builds translation table for use with translate()
partition(sep)	Splits string into 3 parts around separator
replace(old, new)	Replaces all instances of old with new
rfind(sub)	Last index of substring (or -1)
rindex(sub)	Last index (raises error if not found)
rjust(width)	Right-justifies string
rpartition(sep)	Like partition() but starts from end
rsplit(sep)	Splits from right side
rstrip()	Removes trailing whitespace (or characters)
split(sep)	Splits string by separator
splitlines()	Splits string into lines
startswith(prefix)	Checks if string starts with prefix
strip()	Removes leading and trailing whitespace (or characters)
swapcase()	Swaps case of each character
title()	Converts string to title case
translate(table)	Translates characters using mapping table
upper()	Converts string to uppercase
zfill(width)	Pads string with zeros on the left



🔍 5. String Operators
+ → concatenation
* → repetition
in / not in → membership
== / != → comparison

✂️ 6. Slicing & Indexing
python
s = "Python"
s[0]        # 'P'
s[-1]       # 'n'
s[1:4]      # 'yth'
s[::-1]     # 'nohtyP' (reverse string)

🧱 7. Escape Characters
\n – newline
\t – tab
\\ – backslash
\' or \" – quotes inside string

what is array?
 An array is a data structure used to store a collection of items—typically of the same type—in a single, organized unit. 
It’s like a row of labeled boxes where each box holds a value and you can access them by index. 📦

📦 What Is a Structured Array?
A structured array is a type of NumPy array where each element can have multiple fields, like a row in a database or a record in a table. 
Each field has a name and its own data type.
EG-[ ('Alice', 25, 5.5), ('Bob', 30, 6.1), ... ]
Where each row has:
A name (string),
An age (integer),
A height (float)
✅ Benefits of Structured Arrays
->You can store and work with tabular data efficiently.
->Each column (field) can have its own type.
->Helpful for data analysis, machine learning, and working with datasets.

LIST 
🧾 Definition:
->A list is an ordered collection of items, which can be changed (mutable), and it allows duplicate values.

 🎯 Key Features of Lists
Feature	      Description
Ordered	      | Items stay in the same order you added them
Mutable	      | You can change items, add, or remove them
Heterogeneous	| Can store different types: strings, numbers, even other lists
Indexed	      | Access items using positions starting from 0
Allows Duplicates	| [1, 2, 2, 3] is valid

➕ Add & Insert
Method	                     Description	                      Example
append(x)	          Add x to the end of the list	          my_list.append(4)
extend(iterable)	   Add elements from another iterable	    my_list.extend([6, 7])
insert(i, x)	       Insert x at index i	                   my_list.insert(1, 10)

❌ Remove Items
Method            	Description	                          Example
remove(x)	       Removes first occurrence of x          	my_list.remove(2)
pop(index)      	Removes and returns item at index i    	my_list.pop(0) → returns 1
clear()	         Empties the entire list               	 my_list.clear()
pop()            removes element from the last

🔍 Search & Analyze
Method	           Description	                                 Example
index(x)	    Returns index of first x	                     my_list.index(3)
count(x)	    Counts how many times x appears    	          my_list.count(2)
in           keyword Checks if item exists	                2 in my_list → True
len()        provides total no of elements present in list

🔁 Sort & Reverse
Method	       Description	                     Example
sort()	      Sorts list in ascending order	   my_list.sort()
reverse()    Reverses the list’s order	       my_list.reverse()

📌 Max() and Min()
max() returns the largest value from a list or iterable.
min() returns the smallest value from a list or iterable.
->🔹 Using key Parameter:
You can use key= to customize how values are compared.
words = ["hi", "hello", "hey"]
print(max(words, key=len))  # → hello
print(min(words, key=len))  # → hi

# List comprehension
squares = [x**2 for x in range(5)]  # → [0, 1, 4, 9, 16]

🧠 Tuples 
🔹 What Is a Tuple?
->A tuple is an immutable, ordered sequence of elements.
->Defined using parentheses () or without them (but comma is essential).

EG:
t1 = (1, 2, 3)
t2 = 1, 2, 3  # also a tuple

🔹 Key Properties
Feature	                         Description
Ordered                	Maintains insertion order
Immutable	              Cannot change after creation
Allow Duplicates       	Yes
Can Store Mixed Types  	Yes (int, str, list, etc.)

🔹Tuple Creation
Empty tuple: t = ()
Single element: t = (5,) (comma is necessary)
Nested tuples: t = (1, (2, 3), 4).

🔹Accessing Elements
Indexing: t for the first element, t[-1] for the last.
Slicing: t[1:4] gives a new tuple with elements from index 1 to 3.
Nested access: t[1] for nested tuples.

🔹Basic Tuple Operations
Operation              	Example                       	Description
Concatenation        	(1,2) + (3,4)	                  Combine tuples
Repetition	           ('a',)*3	                       Repeat tuple
Slicing	              t[1:3]	                         Extract a sub-tuple
Membership	           'a' in t	                       Check if an item exists
Length               	len(t)	                         Number of elements
Unpacking	            a, b = (1, 2)	                  Assign tuple elements to variables

🔹Tuple Functions & Methods
Function/Method     Purpose                     	            Example
len(t)	             Returns the number of items	             len((1,2,3)) → 3
max(t)             	Returns the largest item	                max((1,3,2)) → 3
min(t)              Returns the smallest item	               min((1,3,2)) → 1
sum(t)             	Returns the sum of elements(if numeric)	 sum((1,2,3)) → 6
count(x)	           how many times "x" appears               (1,2,2,3).count(2) → 2
index(x)	           Returns first index of x	                (1,2,3).index(2) → 11
sort() Method       modifies the original list               SYNTAX = list(sorted(TUP1,key=None, reverse=False)
zip()               to pair up elements from all tuples

 #IF TUPLE CONVERTED TO LIST ,IT CAN BE CHANGED OR MUTABLE
🔹Tuple Packing and Unpacking in Python
1. Tuple Packing
->Definition: Packing is the process of combining multiple values into a single tuple.
->How: Assigning multiple comma-separated values to a single variable automatically creates a tuple.

2. Tuple Unpacking
->Definition: Unpacking extracts the individual elements of a tuple into separate variables.
->Requirement: The number of variables on the left must match the number of elements in the tuple,
unless using extended unpacking.

3. Extended Unpacking with *
->Allows capturing multiple elements into a list during unpacking.
->Useful when the number of variables is fewer than the number of tuple elements.

🔹Python range() 
What is range()?
The range() function generates an immutable sequence of integers.
It is commonly used for looping a specific number of times or generating a sequence of numbers.
SYNTAX:
range(stop)
range(start, stop)
range(start, stop, step)

🔹Tuple comprehension
->Tuple comprehension	Not supported directly	(x for x in iterable) is a generator
->Imitate with list comp	tuple([x for x in iterable])	Creates tuple from list comprehension
->Imitate with generator	tuple(x for x in iterable)	Creates tuple from generator expression

Tuple Comprehension in Python: Accurate Notes
1. No Direct Tuple Comprehension Syntax
Python does not support direct tuple comprehension like list, set, or dictionary comprehensions.
Writing (x for x in iterable) creates a generator expression, not a tuple.
This is because tuples are immutable and cannot be built incrementally like lists or sets.

2. How to Create Tuples Using Comprehension-Like Syntax
You can imitate tuple comprehension by using:
List comprehension inside the tuple() constructor, or
Generator expression inside the tuple() constructor.

✅ lambda Function()
Think of lambda as a compact way to write small functions, especially when you don't want to use a full def block.
EG:
1)
add = lambda x, y: x + y
print(add(3, 5))  # Output: 8

2)🌀 Sorting with lambda:
data = [('apple', 3), ('banana', 1), ('cherry', 2)]
sorted_data = sorted(data, key=lambda x: x[1])
print(sorted_data)  # Sorted by number

🔑key Function()
The key parameter is used in functions like sorted(), max(), min(), etc.,
to specify a function that will be applied to each element before comparison.
-> DEFINES ON WHAT BASIS ? 
EG : key == len # means to operate on basis of length

🧱SETS
Unordered, mutable collection of unique elements
Defined with curly braces {} or using set() constructor
Duplicate elements are automatically removed
EG:
A = {1, 2, 3}
B = set([2, 3, 4])
 
➕ Adding Elements to a Set
1)add() – Adds a single element
EG:
A = {1, 2}
A.add(3)
# A becomes {1, 2, 3}

2)update() – Adds multiple elements (from list, set, tuple, etc.)
EG:
A.update([4, 5])
# A becomes {1, 2, 3, 4, 5}

➖ Removing Elements from a Set
3)remove() – Removes specific item (error if not found)
EG:
A.remove(2)  # KeyError if 2 not in A

4)discard() – Removes item if present (no error if not)
EG:
A.discard(10)  # Safe even if 10 is not in A

5)pop() – Removes and returns a random element
EG:
val = A.pop()  # Element removed randomly

6)clear() – Removes all elements
EG:
A.clear()

🧮 Set Operations  
Operation            	                Syntax	                                    Description
Union(ALL ELEMENTS)              `A  orA.union(B)`                      	  Combines all elements
Intersection(COMMON IN BOTH)  	   A & B or A.intersection(B)	              Common elements only
Difference                       	A - B or A.difference(B)	                Items in A but not in B
Symmetric Diff(UNIQUE ELEMENTS)	  A ^ B or A.symmetric_difference(B)    	  Items in A or B but not both
Subset Check	                     A <= B or A.issubset(B)                 	A is contained in B
Superset Check	                   A >= B or A.issuperset(B)	               B is contained in A
Disjoint Check	                   A.isdisjoint(B)	                         No common elements

1️⃣ Union – Combines all unique elements
EG:
A = {1, 2, 3}
B = {3, 4, 5}

print("Union:", A | B)  # or A.union(B)
# Output: {1, 2, 3, 4, 5}
✅ Useful for merging datasets without duplicates.

2️⃣ Intersection – Finds common elements
EG:
print("Intersection:", A & B)  # or A.intersection(B)
# Output: {3}
✅ Helps find overlap in choices, preferences, or results.

3️⃣ Difference – Elements in A not in B
EG:
print("A - B:", A - B)  # or A.difference(B)
# Output: {1, 2}
✅ Great for finding unique entries or exclusions.

4️⃣ Symmetric Difference – Elements in either set but not both
EG:
print("Symmetric Difference:", A ^ B)  # or A.symmetric_difference(B)
# Output: {1, 2, 4, 5}
✅ Identifies mismatches or disjoint items.

5️⃣ Subset & Superset Checks
EG:
C = {1, 2}
print("C is subset of A:", C.issubset(A))      # True
print("A is superset of C:", A.issuperset(C))  # True
✅ Important in permissions, group hierarchies, and filtering.

6️⃣ Disjoint Check – No common elements
EG:
D = {10, 11}
print("A and D are disjoint:", A.isdisjoint(D))  # True

 🧠 Quick Notes for Interviews
->Sets are unordered, so indexing/slicing doesn't work.
->Use sets for membership tests, duplicate removal, and fast comparisons.
->set() on a string or list removes duplicates.
->Ideal for solving problems like:
->Finding unique items
->Checking overlap
->Counting distinct values

🧠 Set Comprehension
Set comprehension is a concise way to create sets from iterable data sources using a single line of code, following the pattern:
SYNTAX:
{expression for item in iterable if condition}

->Similar to list comprehension, but uses {} to build a set
->Automatically removes duplicates
->Only includes items that meet the specified condition

🧠 Basic Built-in Functions for Sets
Function          	Description
len(set)	          Returns number of elements
max(set)	          Largest value in set
min(set)	          Smallest value in set
sum(set)	          Sum of all elements
sorted(set)	       Returns sorted list
any(set)	          True if at least one item is truthy
all(set)	          True if all items are truthy
enumerate(set)    	Returns index-value pairs
list(set)	         Converts set to list
tuple(set)        	Converts set to tuple

🧊Frozenset
->It’s an immutable set — once created, you can’t change it.
->Like a regular set, it stores unique, unordered elements.
->Can be used as a dictionary key or element in another set (regular sets cannot).
EG:
fs = frozenset([1, 2, 3, 2])
print(fs)  # Output: frozenset({1, 2, 3})

✅ Key Features
Property	             Regular Set	              Frozenset
Mutable	              ✅ Yes                   	❌ No
Hashable	             ❌ No                    	✅ Yes
Allows duplicates	    ❌ No	                    ❌ No
Uses curly braces	    ✅ Yes	                   ❌ No (use frozenset())

🔒 What You CAN Do with a Frozenset
1)len(fs) – Count items

2)min(fs), max(fs) – Get smallest/largest

3)fs.union(...), fs.intersection(...), fs.difference(...) – Set operations

4)fs.isdisjoint(...), fs.issubset(...), fs.issuperset(...)

🚫 What You CAN’T Do
1)No add(), remove(), pop(), clear()

2)No updates — it’s frozen!

✅ Examples of Hashable Types
Type     	Hashable?	    Can be Dict Key?
int	      ✔️ Yes	       ✔️ Yes
float	    ✔️ Yes	       ✔️ Yes
str      	✔️ Yes	       ✔️ Yes
tuple	    ✔️ Yes (only if all elements are hashable)	✔️ Yes
frozenset	✔️ Yes	        ✔️ Yes
list	     ❌ No         	❌ No
dict	     ❌ No	         ❌ No
set	      ❌ No	         ❌ No
